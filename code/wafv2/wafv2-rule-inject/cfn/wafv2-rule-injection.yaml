AWSTemplateFormatVersion: 2010-09-09
Parameters:
  CodeS3BucketPrefix:
    Type: String
    Default: olsonian-personal-code
  CodeS3Key:
    Type: String
    Default: waf/lambda/wafRateRuleInject/lambda.zip
  WAFRuleKey:
    Type: String
    Default: <na>
  RBRName:
    Type: String
    Default: InjectedRateBasedRule
  snsTopicDetails:
    Type: String
  WebACLPolicyIdentifier:
    Type: String
    Default: AWSDefaultWAFRule
  RateBasedRuleAction:
    Type: String
    Description: Rate based rule action, count or block based on rate
    Default: Count
    AllowedValues:
      - Count
      - Block
  RateBasedRuleValue:
    Type: Number
    Description: Trigger rate based rule when more than value requests by aggregate key (IP or forwarded_IP))
    Default: 100
    MinValue: 100
    MaxValue: 20000000
  RateBaseAggregateKey:
    Type: String
    Default: IP
    AllowedValues:
     - IP
     - FORWARDED_IP
  RateBaseAggregateKeyHeaderName:
    Type: String
    Default: n.a.
  RateBaseAggregateKeyFallback:
    Type: String
    Default: MATCH
    AllowedValues:
      - MATCH
      - NO_MATCH
Resources:
  HealthCheckEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "WAFRateRuleInjection-${WebACLPolicyIdentifier}"
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventName:
          - CreateWebACL
          - UpdateWebACL
          - DeleteWebACL
      Targets:
        - Arn: !GetAtt WAFRuleInjectLambda.Arn
          Id:
            WAFRuleInjectLambda
  WAFRuleInjectLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  WAFRuleInjectLambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WAFRuleInjectLambdaPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - "wafv2:UpdateWebACL"
              - "wafv2:GetWebACL"
              - "wafv2:ListWebACLs"
              - "ec2:DescribeRegions"
              - "cloudwatch:PutMetricAlarm"
            Resource: "*"
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${CodeS3BucketPrefix}*/*"
      Roles:
        - !Ref WAFRuleInjectLambdaRole
  WAFUpdateOnCFNActions:
    Type: Custom::InjectWAFRules
    DependsOn: WAFRuleInjectLambdaPolicy
    Properties:
      ServiceToken: !GetAtt WAFRuleInjectLambda.Arn
      RateBasedRuleAction: !Ref RateBasedRuleAction
      RateBasedRuleValue: !Ref RateBasedRuleValue
      RateBaseAggregateKey: !Ref RateBaseAggregateKey
      RateBaseAggregateKeyHeaderName: !Ref RateBaseAggregateKeyHeaderName
      RateBaseAggregateKeyFallback: !Ref RateBaseAggregateKeyFallback
      snsTopicDetails: !Ref snsTopicDetails
      WebACLPolicyIdentifier: !Ref WebACLPolicyIdentifier
      WAFRuleKey: !Ref WAFRuleKey
      RBRName: !Ref RBRName
  WAFRuleInjectLambda:
      Type: AWS::Lambda::Function
      Properties:
        Runtime: python3.8
        Role: !GetAtt WAFRuleInjectLambdaRole.Arn
        Handler: waf/lambda/wafRateRuleInject/index.lambda_handler
        Timeout: 300
        Code:
          S3Bucket: !Sub "${CodeS3BucketPrefix}-${AWS::Region}"
          S3Key: !Ref CodeS3Key
        Environment:
          Variables:
            RateBasedRuleAction: !Ref RateBasedRuleAction
            RateBasedRuleValue: !Ref RateBasedRuleValue
            RateBaseAggregateKey: !Ref RateBaseAggregateKey
            RateBaseAggregateKeyHeaderName: !Ref RateBaseAggregateKeyHeaderName
            RateBaseAggregateKeyFallback: !Ref RateBaseAggregateKeyFallback
            snsTopicDetails: !Ref snsTopicDetails
            WebACLPolicyIdentifier: !Ref WebACLPolicyIdentifier
            WAFRuleKey: !Ref WAFRuleKey
            RBRName: !Ref RBRName
            CodeS3Bucket: !Sub "${CodeS3BucketPrefix}-${AWS::Region}"
  WAFRuleInjectLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt WAFRuleInjectLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt HealthCheckEvent.Arn